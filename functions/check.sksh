# shellcheck shell=bash
# shellcheck disable=SC2211  # Function names with ? are valid in bash

# s.check.requirements? arg1...argN
# check if one or a set of executable files exist
# fatal error
function s.check.requirements?() {
	test -z "$*" && return
	while [ -n "$1" ]; do
		if ! command -v "$1" &> /dev/null; then
			s.print.log error "Fatal: $1 not found or permission denied"
			exit 2
		fi
		shift
	done
}

# s.check.variable? arg1
# check if one variable exists
# returns an exit code 2 if not found
# bash is so beautifully crazy that true is zero
function s.check.variable?() {
	if [ -z "$1" ]; then
		return 2
	else
		return 0
	fi
}

# s.check.directory? arg1
# check if directory exists
# returns an exit code 2 if not found
# bash is so beautifully crazy that true is zero
function s.check.directory?() {
	if [ -d "$1" ]; then
		return 0
	else
		return 2
	fi
}

# s.check.file? arg1
# check if file exists (and not empty)
# returns an exit code 2 if not found
# bash is so beautifully crazy that true is zero
function s.check.file?() {
	if [ -s "$1" ]; then
		return 0
	else
		return 2
	fi
}

# s.check.writable? arg1
# check if file or directory is writable
# returns an exit code 2 if not found
function s.check.writable?() {
	if [ -w "$1" ]; then
		return 0
	else
		return 2
	fi
}

# s.check.os 
# check if this script is running from a mac or linux box (no windows support yet!), and checks shell version
# fatal error
function s.check.os() {
	if [ "$(uname)" != "Linux" ] && [ "$(uname)" != "Darwin" ]; then
		s.print.log error "Operating system $(uname) not supported"
		exit 2
	else
		# shellcheck disable=SC2034  # s_os used in other modules
		s_os=$(uname)
	fi
	if [ "${BASH_VERSINFO:-0}" -lt 5 ]; then
		s.print.log error "Minimum bash version required to run smack is 5"
		exit 2
	fi
}

# s.check.root 
# check if this script is running with superuser privileges
# fatal error
function s.check.root() {
	if [ "$UID" != "0" ]; then
		s.print.log error "Only root can do that, $USER"
		exit 2
	fi
}
