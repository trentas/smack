# shellcheck shell=bash
# shellcheck disable=SC2211  # Function names with ? are valid in bash
# shellcheck disable=SC2154  # Variables set in set.sksh and used here (s_color_*, s_emoji_*, s_config_*, s_scriptname)

# s.print.log syslog_priority "message"
# Choose one syslog priority such as debug, info, notice, warn or error and send to syslog and stdout
# Wrong use of this function causes a fatal error
# Thanks to http://www.gnu.org/software/bash/manual/html_node/Bash-Variables.html
function s.print.log() {
	test -z "$*" && return
	s.check.requirements? "logger"
	# shellcheck disable=SC2206  # Intentional word splitting for message array
	local msg=($*)
	unset 'msg[0]'
	test -z "${msg[*]}" && return
	case $1 in
	debug)
		local loglevel="DEBUG "
		local color=$s_color_purple
		;;
	info)
		local loglevel="INFO  "
		local color=$s_color_blue
		;;
	notice)
		local loglevel="NOTICE"
		local color=$s_color_green
		;;
	warn)
		local loglevel="WARN  "
		local color=$s_color_yellow
		;;
	error)
		local loglevel="ERROR "
		local color=$s_color_red
		;;
	*)
		s.print.log error "Usage: s.print.log [debug|info|notice|warn|error] message..."
		exit 2
		;;
	esac
	if [ "$s_config_debug" = "yes" ]; then
		echo -e "${color}[$(date)] ${loglevel} $s_scriptname:${FUNCNAME[0]:+${FUNCNAME[1]}:${BASH_LINENO[0]}} ${msg[*]}${s_color_reset}"
	elif [ "$1" = "debug" ]; then 
		return 1
	fi
	echo -e "$loglevel $s_scriptname:${FUNCNAME[0]:+${FUNCNAME[1]}:${BASH_LINENO[0]}} ${msg[*]}" | logger -p "$s_config_syslog_facility.$1"
}

# s.print.slack syslog_priority "message"
# Choose one syslog priority such as debug, info, notice, warn or error and send to syslog and stdout
# Sends message to Slack webhook with proper error handling and security
function s.print.slack() {
	test -z "$*" && return
	# shellcheck disable=SC2206  # Intentional word splitting for message array
	local msg=($*)
	unset 'msg[0]'
	test -z "${msg[*]}" && return
	# shellcheck disable=SC2154  # s_config_slack_url set by user config
	if ! s.check.variable? "$s_config_slack_url"; then
		s.print.log error "You need to set slack:url variable before using slack functions"
		return 2
	fi
	# shellcheck disable=SC2154  # s_config_slack_channel set by user config
	if ! s.check.variable? "$s_config_slack_channel"; then
		s.print.log error "You need to set slack:channel variable before using slack functions"
		return 2
	fi
	
	# Validate Slack webhook URL format
	if ! echo "$s_config_slack_url" | grep -qE '^https://hooks\.slack\.com/'; then
		s.print.log error "Invalid Slack webhook URL format"
		return 2
	fi
	
	case $1 in
	debug)
		local color="good"
		local emoji=$s_emoji_debug
		;;
	info)
		local color="good"
		local emoji=$s_emoji_info
		;;
	notice)
		local color="warning"
		local emoji=$s_emoji_notice
		;;
	warn)
		local color="warning"
		local emoji=$s_emoji_warn
		;;
	error)
		local color="danger"
		local emoji=$s_emoji_error
		;;
	*)
		s.print.log error "Usage: s.slack.log [debug|info|notice|warn|error] message..."
		exit 2
		;;
	esac
	
	# Properly escape JSON content
	local escaped_text
	escaped_text=$(echo "${emoji}" "${msg[*]}" | sed 's/\\/\\\\/g' | sed 's/"/\\"/g' | sed "s/'/\\'/g")
	local json="{\"channel\": \"$s_config_slack_channel\", \
		\"as_user\":\"false\", \
		\"username\":\"$s_scriptname\", \
		\"icon_emoji\":\":robot_face:\", \
		\"attachments\":[{\
			\"color\":\"$color\", \
			\"text\": \"$escaped_text\"}]}"
	
	# Send to Slack with proper timeout, SSL verification, and error handling
	local response
	response=$(curl --max-time 10 \
		--silent \
		--show-error \
		--fail \
		--request POST \
		--header "Content-Type: application/json" \
		--data "payload=$json" \
		"$s_config_slack_url" 2>&1)
	
	local exitcode=$?
	if [ $exitcode -ne 0 ]; then
		s.print.log error "Failed to send Slack notification: $response"
		return 2
	fi
	
	return 0
}

# s.print.human_readable number_in_bytes
# Convert a number to a human readable representation like numfmt
function s.print.human_readable() {
	b=${1:-0}
	d=''
	s=0
	S=(Bytes {K,M,G,T,E,P,Y,Z}B)
	while ((b > 1024)); do
		d="$(printf ".%02d" $((b % 1024 * 100 / 1024)))"
		b=$((b / 1024))
		(( s++ ))
	done
	echo "$b$d${S[$s]}"
}

# s.print.loading1 
# Prints a funny cursor dance
function s.print.loading1() {
	echo -ne "-.."\\r
	sleep 0.15
	echo -ne ".-."\\r
	sleep 0.15
	echo -ne "..-"\\r
	sleep 0.15
	echo -ne ".-."\\r
	sleep 0.15
}

# s.print.loading2 
# Prints a funny cursor dance
function s.print.loading2() {
	echo -ne "-"\\r
	sleep 0.1
	echo -ne "\\\\"\\r
	sleep 0.1
	echo -ne "|"\\r
	sleep 0.1
	echo -ne "/"\\r
	sleep 0.1
}

# s.print.password characters
# Prints a random generated password
# FIXME: darwin tr is a mess
function s.print.password() {
	local l=$1
       	[ "$l" == "" ] && l=16
      	tr -dc A-Za-z0-9_ < /dev/urandom | head -c "${l}" | xargs
}
